{% extends 'bodyBase.html.twig' %}

{% block title %}End Prelaunch{% endblock %}

{% block content %}
    <div class="admin-contentContainer">
        <div class="card">
            <div class="card-content">
                <span class="card-title">End Prelaunch</span>
                <div id="flash-messages">
                    {% for message in app.flashes('error') %}
                        <div class="error__block">
                            {{ message }}
                        </div>
                    {% endfor %}
                    {% for message in app.flashes('success') %}
                        <div class="success__block">
                            {{ message }}
                        </div>
                    {% endfor %}
                </div>
                <main id="main">
                    {{ form_start(form) }}
                    <div class="input-field">
                        <label style="position: unset!important;">
                            {{ form_widget(form.prelaunchEnded) }}
                            <span>End Prelaunch</span>
                        </label>
                    </div>
                    {% include 'includes/errorBlock.html.twig' with { field: form.prelaunchEnded } %}
                    <div class="input-field">
                        {{ form_label(form.landingContent) }}
                        {{ form_widget(form.landingContent) }}
                        {% include 'includes/errorBlock.html.twig' with { field: form.landingContent } %}
                        <div id="prelaunch-editor-container">
                            {{ configurationContent }}
                        </div>
                    </div>
                    {{ form_end(form) }}
                </main>
            </div>
        </div>
    </div>
{% endblock %}
{% block quillJs %}
    <script>


        var quill = new Quill('#prelaunch-editor-container', {
            modules: {
                'syntax': true,
                'toolbar': [
                    [ 'bold', 'italic', 'underline', 'strike' ],
                    [{ 'font': [] }, { 'size': [] }],
                    [{ 'color': [] }, { 'background': [] }],
                    [{ 'script': 'super' }, { 'script': 'sub' }],
                    [{ 'header': '1' }, { 'header': '2' }, 'blockquote', 'code-block' ],
                    [{ 'list': 'ordered' }, { 'list': 'bullet'}, { 'indent': '-1' }, { 'indent': '+1' }],
                    [ 'direction', { 'align': [] }],
                    [ 'link', 'image'],
                    [ 'clean' ]
                ]
            },
            theme: 'snow'
        });

        $( document ).ready(function () {
            quill.container.firstChild.innerHTML = $('input[type=hidden]').val();
        });

        var form = document.querySelector('form');

        form.addEventListener("submit", callback, false);

        function callback() {
            var emailBody = document.querySelector('input[type=hidden]');
            emailBody.value = quill.root.innerHTML;
            return true;
        }

        function selectLocalImage() {
            const input = document.createElement('input');
            input.setAttribute('type', 'file');
            input.click();

            input.onchange = () => {
                const file = input.files[0];

                // file type is only image.
                if (/^image\//.test(file.type)) {
                    saveToServer(file);
                } else {
                    console.warn('You could only upload images.');
                }
            };
        }

        function saveToServer(file) {
            const fd = new FormData();
            fd.append('image', file);
            const xhr = new XMLHttpRequest();
            xhr.open('POST', '/uploadFile', true);
            xhr.onload = () => {
                if (xhr.status === 200 && xhr.readyState === 4) {
                    const url = JSON.parse(xhr.responseText);
                    insertToEditor(url);
                }
            };
            xhr.send(fd);
        }

        function insertToEditor(url) {
            const range = quill.getSelection();
            quill.insertEmbed(range.index, 'image', `${url}`);
        }

        quill.getModule('toolbar').addHandler('image', () => {
            selectLocalImage();
        });

    </script>
{% endblock %}
